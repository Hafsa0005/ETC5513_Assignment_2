---
title: "Collaborative and Reproducible Practices (Assignment 2)"
author: "Hafsa Altaf"
format: 
  html: 
    theme: cerulean
  pdf: default
editor: visual
---


# A guide to use Git, GitHub and the Command Line Interface for Version Control and Collaboration

This guide provides a clear and step by step explanation of how to effectively use **Git**, **GitHub** and the **Command Line Interface** for version control and team collaboration. 
 
**Git** is a powerful version control system that track changes in files and making it easier for individuals or teams to manage documents or codes and collaborate efficiently. **GitHub** is a cloud-based platform where git repositories can be stored, shared and collaboratively developed by multiple contributors. The **Command Line Interface** is a text-based interface that allow users to execute Git commands and interact directly with both local and remote repositories.

## 1. Create a New RStudio Project and Quarto File

 - In RStudio:
   - Go to **File > New Project > New Directory > New project**
   - Name your project folder (e.g. ETC5513_Assignment_2)
   - Click on the **Create Project**
   - Inside the project, create a new Quarto document:
      **File > New File > Quarto Document** 
   - Name quarto document (e.g. example.qmd), add your name in the **Author**         field, select **HTML** as the output format, click Create
   - Now **Knit** the file using the **Render** button. It generates an               **example.html** file
   
### Output of the Knitted HTML File

<div style="text-align: center;">
  <img src="images/HTML_image.png" alt="Output of the Knitted HTML File" style="border: 2px solid black; padding: 5px; width: 80%;">
</div>

## 2. Create GitHub Repository and Push qmd file to GitHub from Command Line Interface

- GitHub Repository:
  - Go to your GitHub Profile > Create New repository
  - Name the remote repository (e.g. ETC5513_Assignment_2)
  - Clone it to your local computer, you can use **Git Bash** as your **Command Line Interface** on Windows
- To clone the repository using Git Bash:
    - Open Git Bash and Use this command
```{r}
 ## git clone <SSH Key or repository URL>
```
 
- Navigate into the cloned repository folder using Git Bash
```{r}
 ## cd ETC5513_Assignment_2
```
 
- Add your Quarto file (example.qmd) into this folder if it is not already there
- Use the following Git commands to stage, commit and push the file to the remote repository
```{r}
## To stage  >  git add example.qmd
## To commit  >  git commit -m "Add example.qmd Quarto file"
## To push  >  git push origin main
```

## 3. Create a New Branch and Modify File

- Use Git Bash to create a new branch using this command 
```{r}
## git branch testbranch
```

- Now to modify file first switch to **testbranch** using this command 
```{r}
## git switch testbranch
```

Refresh your RStudio to see you are currently working in the **testbranch**

- Modify example.qmd
```{r}
## Adding this new section to see changes in the testbranch.
```

- To push the changes made in example.qmd on a newly created branch to the remote repository, use the following commands to stage, commit, and push the changes
```{r}
## To stage  >  git add example.qmd
## To commit  >  git commit -m "Modified example.qmd in testbranch"
## To push  >  git push origin testbranch
```

When you visit the remote repository on GitHub, you’ll notice that the main branch remains unchanged. However, if you switch to the **testbranch**, you will see the newly added section in example.qmd.

- Create a folder named data in the testbranch, add the data from your first assignment into this folder and then stage and commit but don't push

```{r}
## To stage  >  git add data/Global_Tech_Gadget_Consumption.csv
## To commit  >  git commit -m "Add data folder with Assignment 1 data"
```

## 4. Amend the Previous Commit and Push

- If you want to change the message of your most recent commit, use the following command

```{r}
## git commit --amend
```

Git opens your default text editor, where you can edit the commit message to something like:

```{r}
## Add data folder containing csv file from assignment 1.
```

- After amending the commit message, save and close the editor to apply the changes
  - To save and exit the commit message in Vim: **Press Esc > write :wq > Press Enter**
  
- You’ll now see that the commit message has been updated. Since the commit history has changed, you’ll need to force-push the changes to GitHub using the following command:

```{r}
## git push --force
```


## 5. Create a merge conflict

now to Create a merge conflict between main branch and the testbranch
 
Now being on the same branch that you have created which is testbranch make some changes in the example.qmd which can be adding this new section 

This Section include changes from both branches. 

 Save the file, then stage and commit the change
 
```{r}
## To stage  >  git add example.qmd
## To commit  >  git commit -m "Add new section on testbranch"
```

 
 now Switch to the main branch using this command
```{r}
## git switch main 
```
 
 modify the same section differently, that we added above from This section was added on the testbranch.
```{r}
## This section was added on the testbranch. TO 

## This section was added on the main branch.

```
 
 Save it, then stage and commit
 
```{r}
## To stage  >  git add example.qmd
## To commit  >  git commit -m "Conflicting change on main"
```
 
 
 now being on the main branch merge into testbranch using this comand 
```{r}
## git merge testbranch
```
 
 now u will see conflict something like that on terminala and on qmd file
 
 
 
 now to solve the conflict first of all delete the conflict markers and edit the file to keep only one version or from one branch, which can be some thing like 
```{r}
## This Section include changes from both branches. 
```
 
 now Save the file, then stage and commit the changes and push it to GitHub
```{r}
## To stage  >  git add example.qmd
## To commit  >  git commit -m "Resolved merge conflict in example.qmd"
## To push  >  git push origin main
```
 
 
 now u have solve the merge conflict
 
 
 
 
